name: Release build

on:
  push:
    tags:
      - "v*"

env:
  PROJECT_NAME: Nabla2D
  BUILD_TYPE: Release

permissions:
  checks: write
  contents: write

jobs:
  build-ubuntu-x64:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ninja-build clang-format
        version: 1.0

    - name: Cache Conan packages
      uses: actions/cache@v3
      with:
        path: ~/.conan/data
        key: release-ubuntu-x64-conan-packages-${{ hashFiles('conanfile.txt') }}
        restore-keys: release-ubuntu-x64-conan-packages-

    - name: Install Conan
      uses: turtlebrowser/get-conan@main
      with:
        version: 1.59.0

    - name: Create Conan profile
      run: |
        conan profile new default --detect
        conan profile update settings.compiler.libcxx=libstdc++11 default

    - name: Cache CMake build
      uses: actions/cache@v3
      with:
        path: build
        key: release-ubuntu-x64-cmake-build-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: release-ubuntu-x64-cmake-build-

    - name: Install conan packages
      run: |
        mkdir -p build
        cd build
        conan install .. --build missing -pr default -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True

    - name: CMake init
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE="${{ env.BUILD_TYPE }}" -GNinja ..

    - name: Build
      run: |
        cd build
        cmake --build . --config "${{ env.BUILD_TYPE }}"
    
    - name: Archive build
      run: |
        cd build/bin
        tar -cvzf $PROJECT_NAME.ubuntu-x64.tar.gz *
    
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}.ubuntu-x64.tar.gz
        path: build/bin/${{ env.PROJECT_NAME }}.ubuntu-x64.tar.gz

  build-windows-x86:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Cache Conan packages
      uses: actions/cache@v3
      with:
        path: C:\Users\runneradmin\.conan\data
        key: release-windows-x86-conan-packages-${{ hashFiles('conanfile.txt') }}
        restore-keys: release-windows-x86-conan-packages-

    - name: Install Conan
      uses: turtlebrowser/get-conan@main
      with:
        version: 1.59.0

    - name: Create Conan profile
      run: |
        conan profile new default --detect
        conan profile update settings.compiler.cppstd=17 default

    - name: Cache CMake build
      uses: actions/cache@v3
      with:
        path: build
        key: release-windows-x86-cmake-build-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: release-windows-x86-cmake-build-

    - name: Install conan packages
      run: |
        New-Item -ItemType Directory -Force -Path build
        cd build
        conan install .. --build missing -pr default

    - name: CMake init
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE="${{ env.BUILD_TYPE }}" ..

    - name: Build
      run: |
        cd build
        cmake --build . --config "${{ env.BUILD_TYPE }}"
        move bin/Release.zip bin/${{ env.PROJECT_NAME }}.windows-x86.zip
    
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}.windows-x86.zip
        path: build/bin/${{ env.PROJECT_NAME }}.windows-x86.zip

  deploy:
    runs-on: ubuntu-latest
    needs: [build-ubuntu-x64, build-windows-x86]

    steps:
    - name: Download Ubuntu x64 release
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}.ubuntu-x64.tar.gz

    - name: Download Windows x86 release
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}.windows-x86.zip
    
    - name: List files
      run: |
        ls -lah

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        fail_on_unmatched_files: true
        files: |
          ${{ github.workspace }}/${{ env.PROJECT_NAME }}.ubuntu-x64.tar.gz
          ${{ github.workspace }}/${{ env.PROJECT_NAME }}.windows-x86.zip